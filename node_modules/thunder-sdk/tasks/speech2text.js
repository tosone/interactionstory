'use strict';

const uuid = require('node-uuid');

const mqttEmitterRPC = require('../lib/mqtt-emitter-rpc');

const debuglog = require('util').debuglog('speech2text');

const TOPIC_SPEECH2TEXT_REQUEST = 'speech2text/do/request';
const TOPIC_SPEECH2TEXT_REPLY = 'speech2text/do/reply';


class Speech2TextTask {

  run(args, callback) {
    var correlationId = uuid.v4();
    var {file, pipe, parameter} = args;
    this.correlationId = correlationId;
    this.callback = callback;
    this.rpc = mqttEmitterRPC({
      topic: TOPIC_SPEECH2TEXT_REQUEST,
      payload: { correlationId, file, pipe, parameter },
      emitter: this.app.mqttEmitter,
      related: this.isRelated.bind(this)
    }, [ TOPIC_SPEECH2TEXT_REPLY ], this.onResult.bind(this));
  }

  isRelated(payload) {
    debuglog('determin related:\n > %j\n > %j', payload, this);
    return payload.correlationId === this.correlationId;
  }

  onResult(err, payload, params) {
    this.callback(null, payload);
  }

  onCancel() {
    this.rpc.cancel();
  }
}

module.exports = Speech2TextTask;
