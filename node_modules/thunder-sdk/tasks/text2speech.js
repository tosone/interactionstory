'use strict';

const uuid = require('node-uuid');

const mqttEmitterRPC = require('../lib/mqtt-emitter-rpc');

const TOPIC_TEXT2SPEECH_REQUEST = 'text2speech/do/request';
const TOPIC_TEXT2SPEECH_REPLY = 'text2speech/do/reply';

const TOPIC_TEXT2SPEECH_STOP = 'text2speech/do/request/stop';


class Text2SpeechTask {

  run(args, callback) {
    var correlationId = uuid.v4();
    this.correlationId = correlationId;
    args.correlationId = correlationId;
    this.callback = callback;
    this.rpc = mqttEmitterRPC({
      topic: TOPIC_TEXT2SPEECH_REQUEST,
      payload: args,
      emitter: this.app.mqttEmitter,
      related: this.isRelated.bind(this)
    }, [ TOPIC_TEXT2SPEECH_REPLY ], this.onResult.bind(this));
  }

  isRelated(payload) {
    return payload.correlationId === this.correlationId;
  }

  onResult(err, payload, params) {
    this.callback(null, payload);
  }

  onCancel() {
    this.rpc.cancel();
    this.app.mqttEmitter.publish(TOPIC_TEXT2SPEECH_STOP, JSON.stringify({
      correlationId: this.correlationId
    }));
  }
}

module.exports = Text2SpeechTask;
