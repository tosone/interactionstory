'use strict';

const uuid = require('node-uuid');

const mqttEmitterRPC = require('../lib/mqtt-emitter-rpc');

const TOPIC_MIC_RECORD_START = 'environmental_perception/mic/recording/start';
const TOPIC_MIC_RECORD_DONE = 'environmental_perception/mic/recording/done';


class AudioRecTask {

  run(args, callback) {
    var correlationId = uuid.v4();
    args.correlationId = correlationId;
    this.correlationId = correlationId;
    this.callback = callback;
    this.rpc = mqttEmitterRPC({
      topic: TOPIC_MIC_RECORD_START,
      payload: args,
      emitter: this.app.mqttEmitter,
      related: this.isRelated.bind(this)
    }, [TOPIC_MIC_RECORD_DONE], this.onResult.bind(this));
  }

  isRelated(payload, params) {
    return payload.correlationId === this.correlationId;
  }

  onResult(err, payload, params) {
    if (err) return this.callback(err);
    this.callback(null, payload);
  }

  onCancel() {
    this.rpc.cancel();
  }
}

module.exports = AudioRecTask;
