'use strict';

const Kareem = require('kareem');
const uuid = require('node-uuid');

const Context = require('./context');
const ContextError = require('./exceptions').ContextError;
const Intent = require('./intent');

const debuglog = require('util').debuglog('thunder');


class App {

  constructor(appId, contextStore, mqttEmitter, defaultTaskConfig) {
    this.appId = appId;
    this.mqttEmitter = mqttEmitter;
    this.contextStore = contextStore;

    this.taskConfig = defaultTaskConfig || {};
    this.hooks = new Kareem();

    this.lifeCycleStartHandler = this._onLifeCycleStart.bind(this);
    this.lifeCyclePauseHandler = this._onLifeCyclePause.bind(this);
    this.lifeCycleStopHandler = this._onLifeCycleStop.bind(this);
    this.lifeCycleResumeHandler = this._onLifeCycleResume.bind(this);
    this.electionSuccessHandler = this._onElectionSuccess.bind(this);
  }

  _onLifeCycleStart(payload) {
    debuglog('[%s] received start', this.appId);
    var raw;
    try {
      raw = JSON.parse(payload.toString());
    } catch (err) {
      raw = {};
    }

    var intent = new Intent(raw.intent, raw);
    var context = new Context(this);

    this.contextStore.push(this.appId, context);
    this.hooks.execPost('start', context, [context, intent], () => {
      debuglog('[%s] after start', this.appId);
    });
  }

  _onLifeCyclePause(payload) {
    debuglog('[%s] received pause', this.appId);
    try {
      var context = this.contextStore.peek(this.appId);
      debuglog('restored context: %j', context);
      if (!context) {
        throw new ContextError();
      }
      this.hooks.execPost('pause', context, [context], () => {
        debuglog('[%s] after pause', this.appId);
      });
    } catch(err) {
      if (err instanceof ContextError) {
        return debuglog('[%s] no context to pause', this.appId);
      }
      throw err;
    }

  }

  _onLifeCycleStop(payload) {
    debuglog('[%s] received stop', this.appId);
    try {
      var context = this.contextStore.peek(this.appId);
      if (!context) {
        throw new ContextError();
      }
      this.hooks.execPost('stop', context, [context], () => {
        debuglog('[%s] after stop', this.appId);
        context.end();
      });
    } catch(err) {
      if (err instanceof ContextError) {
        return debuglog('[%s] no context to pause', this.appId);
      }
      throw err;
    }
  }

  _onLifeCycleResume(payload) {
    debuglog('[%s] received resume', this.appId);
    try {
      var context = this.contextStore.peek(this.appId);
      if (!context) {
        throw new ContextError();
      }
      this.hooks.execPost('resume', context, [context], () => {
        debuglog('[%s] after resume', this.appId);
      });
    } catch(err) {
      if (err instanceof ContextError) {
        return debuglog('[%s] no context to pause', this.appId);
      }
      throw err;
    }
  }

  _onElectionSuccess(payload) {
    var p
    try {
      p = JSON.parse(payload.toString());
    } catch (err) {
      p = {};
    }

    p.appId = this.appId;
    p.intent = this.action;
    this.mqttEmitter.publish('life_cycle/intent_handled', JSON.stringify(p));
  }

  pre() {
    this.hooks.pre.apply(this.hooks, arguments);
  }

  post() {
    this.hooks.post.apply(this.hooks, arguments);
  }

  mount() {
    this.mqttEmitter.on(`intent/${this.action}/election`, this.electionSuccessHandler);
    this.mqttEmitter.on(`${this.appId}/life_cycle/start`, this.lifeCycleStartHandler);
    this.mqttEmitter.on(`${this.appId}/life_cycle/pause`, this.lifeCyclePauseHandler);
    this.mqttEmitter.on(`${this.appId}/input/stop`, this.lifeCycleStopHandler);
    this.mqttEmitter.on(`${this.appId}/life_cycle/resume`, this.lifeCycleResumeHandler);
  }

  unmount() {
    this.contextStore.clean(this.appId);
    this.mqttEmitter.removeListener(`intent/${this.action}/election`, this.electionSuccessHandler);
    this.mqttEmitter.removeListener(`${this.appId}/life_cycle/start`, this.lifeCycleStartHandler);
    this.mqttEmitter.removeListener(`${this.appId}/life_cycle/pause`, this.lifeCyclePauseHandler);
    this.mqttEmitter.removeListener(`${this.appId}/input/stop`, this.lifeCycleStopHandler);
    this.mqttEmitter.removeListener(`${this.appId}/life_cycle/resume`, this.lifeCycleResumeHandler);
  }

  clean() {
    this.contextStore.pop(this.appId);
    this.mqttEmitter.publish('life_cycle/stopped');
  }

  getTaskClass(name) {
    return this.taskConfig[name];
  }

  registerAction(action) {
    this.action = action;
  }

  registerTask(name, Task) {
    this.taskConfig[name] = Task;
  }

  lockPush2Talk(enter) {
    if (enter) {
      this.mqttEmitter.publish('app_dispatcher/lock');
    } else {
      this.mqttEmitter.publish('app_dispatcher/unlock');
    }
  }

  setImmersiveMode(enter, key) {
    var correlationId = uuid.v4();
    if (enter) {
      this.mqttEmitter.publish('app_dispatcher/immersive_mode/enter', JSON.stringify({ correlationId, key }));
    } else {
      this.mqttEmitter.publish('app_dispatcher/immersive_mode/exit', JSON.stringify({ correlationId, key }));
    }
  }

  halfLockPush2Talk(confirm) {
    this.mqttEmitter.on(`${this.appId}/life_cycle/half_lock_confirm`, (payload) => {
      var result = confirm(payload);
      if (!result) {
        this.mqttEmitter.publish('life_cycle/half_lock_not_related', payload);
      }
    });
    this.mqttEmitter.publish('app_dispatcher/half_lock');
  }

  getLatestContext() {
    var context = this.contextStore.peek(this.appId);
    if (!context) {
      throw new ContextError('no context');
    }
    return context;
  }
}


module.exports = App;
