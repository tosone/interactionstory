'use strict';

const Promise = require('bluebird');

const ContextError = require('./exceptions').ContextError;

const debuglog = require('util').debuglog('thunder');


class Context {

  constructor(app) {
    this.app = app;
    this.promises = [];
    this.ended = false;
  }

  end() {
    debuglog('context stopped');
    this.ended = true;
    this.app.clean();
  }

  cancelAllTasks() {
    this.promises.forEach(promise => promise.cancel());
    this.promises = [];
    return this;
  }

  removePromise(promise) {
    this.promises.splice(this.promises.indexOf(promise));
  }

  runTask(name, args) {
    if (this.ended) throw new ContextError('context already ended');

    var Task = this.app.getTaskClass(name);
    var task = new Task();
    task.app = this.app;
    task.context = this;

    var promise = new Promise((resolve, reject, onCancel) => {
      Promise.fromCallback(task.run.bind(task, args))
        .then(resolve)
        .catch(reject);
      onCancel(task.onCancel.bind(task));
    });

    this.promises.push(promise);
    return promise;
  }
}

module.exports = Context;
