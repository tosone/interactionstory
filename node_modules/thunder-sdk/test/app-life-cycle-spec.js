const thunder = require('..');
const ContextError = require('../lib/exceptions').ContextError;
const Context = require('../lib/context');
const assert = require('assert');

var app = thunder.app('test');


describe('app lifecycle', function () {

  describe('start', function () {

    var app = thunder.app('test');

    before(function () {
      app.mount();
    });

    after(function () {
      app.unmount();
    });

    it('should start', function (done) {
      app.post('start', function (ctx) {
        assert(ctx instanceof Context);
        done();
      });

      thunder.mqttEmitter.publish('test/life_cycle/start');
    });

  });


  describe('pause', function () {

    var app = thunder.app('test');

    before(function () {
      app.mount();
    });

    after(function () {
      app.unmount();
    });

    it('should pause', function (done) {
      var startCtx;

      app.post('start', function (ctx) {
        startCtx = ctx;
        thunder.mqttEmitter.publish('test/life_cycle/pause');
      });

      app.post('pause', function (ctx) {
        assert(startCtx === ctx);
        done();
      });

      thunder.mqttEmitter.publish('test/life_cycle/start');
    });

  });

  describe('pause', function () {

    var app = thunder.app('test');

    before(function () {
      app.mount();
    });

    after(function () {
      app.unmount();
    });

    it('should pause', function (done) {
      var startCtx;

      app.post('start', function (ctx) {
        startCtx = ctx;
        thunder.mqttEmitter.publish('test/life_cycle/pause');
      });

      app.post('pause', function (ctx) {
        assert(startCtx === ctx);
        done();
      });

      thunder.mqttEmitter.publish('test/life_cycle/start');
    });

  });

  describe('auto clean context', function () {

    var app = thunder.app('test');

    before(function () {
      app.mount();
    });

    after(function () {
      app.unmount();
    });

    it('should have no context', function (done) {

      app.post('start', function () {
        thunder.mqttEmitter.publish('test/input/stop');
      });

      app.post('stop', function () {
        assert(app.contextStore.store.test.length !== 0);
        setTimeout(function () {
          assert(app.contextStore.store.test.length === 0);
          done();
        }, 10);
      });

      thunder.mqttEmitter.publish('test/life_cycle/start');
    });

  });

  describe('context end', function () {

    var app = thunder.app('test');

    before(function () {
      app.mount();
    });

    after(function () {
      app.unmount();
    });

    it('should not pause', function (done) {

      app.post('start', function (ctx) {
        ctx.end();
        thunder.mqttEmitter.publish('test/life_cycle/pause');
        setTimeout(done, 10);
      });

      app.post('pause', function () {
        assert(false)
      });

      thunder.mqttEmitter.publish('test/life_cycle/start');
    });

  });

  describe('cancel all task', function () {

    var app = thunder.app('test');

    before(function () {
      app.mount();
    });

    after(function () {
      app.unmount();
    });

    it('should be canceled', function (done) {

      app.post('start', function (ctx) {
        ctx.runTask('text2speech', { text: 'vtext'});
        thunder.mqttEmitter.publish('test/life_cycle/pause');
      })

      app.post('pause', function (ctx) {
        ctx.cancelAllTasks();
        assert(ctx.promises.length === 0);
        done();
      });

      thunder.mqttEmitter.publish('test/life_cycle/start');

    })

  });

  describe('prevent end context run task', function () {

    var app = thunder.app('test');

    before(function () {
      app.mount();
    });

    after(function () {
      app.unmount();
    });

    it('should throw contexterror', function (done) {

      app.post('start', function (ctx) {
        ctx.end();
        setTimeout(function () {
          try {
            ctx.runTask('text2speech', { text: 'vtext'});
          } catch (err) {
            assert(err instanceof ContextError);
            done();
          }
        });
      });

      thunder.mqttEmitter.publish('test/life_cycle/start');

    })

  });

});
