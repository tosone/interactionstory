const util = require('util');
const mqtt = require('mqtt');
const assert = require('assert');
const NodeMQTTEmitter = require('../lib/node-mqtt-emitter');
const mqttEmitterRPC = require('../lib/mqtt-emitter-rpc');
const Text2SpeechTask = require('../tasks/text2speech');

var debuglog = util.debuglog('test');
var mqttClient = mqtt.connect('mqtt://localhost');
var mqttEmitter = NodeMQTTEmitter(mqttClient);
var app = { mqttEmitter };


describe('test2speech spec', function () {
  before(function () {
    mqttEmitter.on('text2speech/do/request', function (payload) {
      var obj = JSON.parse(payload.toString());
      debuglog('received request: %j', obj);
      if (obj.text !== 'vtext') return;
      mqttEmitter.publish('text2speech/do/reply', JSON.stringify({
        correlationId: obj.correlationId,
        text: 'vtext2',
        file: 'vfile2'
      }));
      debuglog('published');
    });
  });
  after(function () {
    mqttEmitter.removeAllListeners('text2speech/do/request');
  });
  it('should be ok', function (done) {
    var task = new Text2SpeechTask();
    task.app = app;
    task.run({
      text: 'vtext',
      parameter: 'vparameter'
    }, function (err, results) {
      if (err) return done(err);
      assert(results.file === 'vfile2');
      assert(results.text === 'vtext2');
      done()
    });
  });
});
